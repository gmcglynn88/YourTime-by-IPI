<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Time by IPI</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Proxima+Nova:wght@400;700&display=swap">
    <script src="https://code.jquery.com/jquery-3.7.1.js"integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4="crossorigin="anonymous"></script>
</head>


<script defer>
var balancesData = {};

var detailsData = {};


function getYourTimeData() {
    $.ajax({
        url: '/your-time-data',
        type: 'GET',
        success: function(data) {
            console.log('Your Time Data:', data);
            balancesData = data;
        },
        error: function(err) {
            console.error('Error fetching Your Time data:', err);
        }
    });
}

getYourTimeData()

function getTimeOffRequestsData() {
        $.ajax({
            url: '/timeoffrequests-data',
            type: 'GET',
            success: function(data) {
                console.log('Time Off Requests Data:', data);
                detailsData = data;
            },
            error: function(err) {
                console.error('Error fetching Time Off Requests data:', err);
            }
        });
    }

    // Call the function to fetch data
    getTimeOffRequestsData();


function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
}

document.getElementById("defaultOpen").click();

function updateTables() {
    const selectedAgent = document.getElementById('agent-select').value;
    const selectedYear = document.getElementById('year-select').value;
    const selectedManagementUnit = document.getElementById('management-unit-select').value;
    const selectedTeam = document.getElementById('team-select').value;

    console.log("Selected Agent:", selectedAgent);
    console.log("Selected Year:", selectedYear);
    console.log("Selected Management Unit:", selectedManagementUnit);
    console.log("Selected Team:", selectedTeam);

    const balancesTableBody = document.getElementById('balances-table-body');
    const detailsTableBody = document.getElementById('details-table-body');

    balancesTableBody.innerHTML = '';
    detailsTableBody.innerHTML = '';

    let allBalancesData = [];
    let allDetailsData = [];

    if (selectedAgent === 'all') {
        for (let agent in balancesData) {
            let agentData = localStorage.getItem('balancesData-' + agent);
            if (agentData) {
                agentData = JSON.parse(agentData);
            } else {
                agentData = balancesData[agent];
            }
            allBalancesData = allBalancesData.concat(agentData);
        }
        for (let agent in detailsData) {
            allDetailsData = allDetailsData.concat(detailsData[agent]);
        }
    } else {
        let agentData = localStorage.getItem('balancesData-' + selectedAgent);
        if (agentData) {
            agentData = JSON.parse(agentData);
        } else {
            agentData = balancesData[selectedAgent] || [];
        }
        allBalancesData = agentData;
        allDetailsData = detailsData[selectedAgent] || [];
    }

    console.log("All Balances Data:", allBalancesData);
    console.log("All Details Data:", allDetailsData);

    if (selectedManagementUnit !== 'all') {
        allBalancesData = allBalancesData.filter(data => data.managementUnit === selectedManagementUnit);
        allDetailsData = allDetailsData.filter(data => data.managementUnit === selectedManagementUnit);
    }

    if (selectedTeam !== 'all') {
        allBalancesData = allBalancesData.filter(data => data.team === selectedTeam);
        allDetailsData = allDetailsData.filter(data => data.team === selectedTeam);
    }

    allDetailsData = allDetailsData.filter(data => {
        const startDate = new Date(data.timeOffStart);
        const endDate = new Date(data.timeOffEnd);
        return selectedYear === 'all' || startDate.getFullYear() == selectedYear || endDate.getFullYear() == selectedYear;
    });

    console.log("Filtered Balances Data:", allBalancesData);
    console.log("Filtered Details Data:", allDetailsData);

    allBalancesData.forEach(data => {
        const row = document.createElement('tr');
        Object.keys(data).forEach(key => {
            const cell = document.createElement('td');
            if (key === 'holidayCurrentYear' || key === 'holidayNextYear' || key === 'timeOffInLieu') {
                const input = document.createElement('input');
                input.type = 'text';
                input.value = data[key];
                if (key === 'timeOffInLieu' && data[key] < 0) {
                    input.classList.add('negative');
                }
                cell.appendChild(input);
            } else {
                cell.textContent = data[key];
            }
            row.appendChild(cell);
        });
        balancesTableBody.appendChild(row);
    });

    allDetailsData.forEach(data => {
        const row = document.createElement('tr');
        Object.values(data).forEach((value, index) => {
            const cell = document.createElement('td');
            cell.textContent = value;
            row.appendChild(cell);
            if (index === 5) { // After balanceDeduction cell, add Days cell
                const daysCell = document.createElement('td');
                daysCell.textContent = (value / 8).toFixed(1); // Assuming 8 hours per day
                row.appendChild(daysCell);
            }
        });
        detailsTableBody.appendChild(row);
    });
}

document.addEventListener('DOMContentLoaded', () => {
    updateTables(); // Initial load
});

function saveChanges() {
    const selectedAgent = document.getElementById('agent-select').value;
    const balancesTableBody = document.getElementById('balances-table-body');
    const balancesRows = balancesTableBody.getElementsByTagName('tr');
    let balancesData = [];

    for (let row of balancesRows) {
        let cells = row.getElementsByTagName('td');
        balancesData.push({
            agentName: cells[0].textContent,
            team: cells[1].textContent,
            managementUnit: cells[2].textContent,
            holidayCurrentYear: cells[3].getElementsByTagName('input')[0].value,
            holidayNextYear: cells[4].getElementsByTagName('input')[0].value,
            timeOffInLieu: cells[5].getElementsByTagName('input')[0].value
        });
    }

    // Save to local storage
    if (selectedAgent !== 'all') {
        localStorage.setItem('balancesData-' + selectedAgent, JSON.stringify(balancesData));
    } else {
        for (let agent in balancesData) {
            let agentData = balancesData.filter(data => data.agentName === agent);
            localStorage.setItem('balancesData-' + agent, JSON.stringify(agentData));
        }
    }

    alert('Changes saved successfully!');
}

function exportTableToCSV(tableID, filename) {
    var csv = [];
    var rows = document.querySelectorAll(`#${tableID} tr`);

    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll("td, th");

        for (var j = 0; j < cols.length; j++) {
            if (cols[j].querySelector('input')) {
                row.push(cols[j].querySelector('input').value);
            } else {
                let cellText = cols[j].innerText;
                // Check if the cell contains a date in DD/MM/YYYY format and convert it to YYYY-MM-DD
                if (cellText.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
                    const [day, month, year] = cellText.split('/');
                    cellText = `${year}-${month}-${day}`;
                }
                row.push(`"${cellText}"`); // Enclose cell text in quotes to preserve formatting
            }
        }

        csv.push(row.join(","));
    }

    // Create a CSV file and download it
    var csvFile = new Blob([csv.join("\n")], { type: "text/csv" });
    var downloadLink = document.createElement("a");
    downloadLink.download = filename;
    downloadLink.href = window.URL.createObjectURL(csvFile);
    downloadLink.style.display = "none";
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
}


function filterTables() {
    const searchInput = document.getElementById('search-input').value.toLowerCase();
    const balancesTableBody = document.getElementById('balances-table-body');
    const detailsTableBody = document.getElementById('details-table-body');

    const filterTable = (tableBody) => {
        const rows = tableBody.getElementsByTagName('tr');
        for (let row of rows) {
            const agentNameCell = row.getElementsByTagName('td')[0];
            const agentName = agentNameCell.textContent.toLowerCase();
            if (agentName.includes(searchInput)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        }
    };

    filterTable(balancesTableBody);
    filterTable(detailsTableBody);
}

</script>
<body>
    <header>
        <h1>Your Time by IPI</h1>
        <img src="https://raw.githubusercontent.com/gmcglynn88/TimeoffApp/main/IPI_Primary%20Identity_Corporate_REVERSED_ECC.png" alt="Consulting Logo" class="logo">
    </header>

    
    <hr class="divider">

    <div class="tab-container">
        <div class="tab">
            <button class="tablinks active" onclick="openTab(event, 'TimeOffBalances')">Time Off Balances</button>
            <button class="tablinks" onclick="openTab(event, 'Settings')" id="defaultOpen">Add Agent Data</button>
        </div>
        <div class="button-container">
            <script>
                function handleFormSubmit(event) {
                    event.preventDefault();
                    const formData = new FormData(event.target);
                    fetch('/upload', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.text())
                    .then(result => {
                        alert(result); // Display the result in an alert
                    })
                    .catch(error => {
                        alert('Error uploading file: ' + error.message);
                    });
                }
            </script>
            <form onsubmit="handleFormSubmit(event)" enctype="multipart/form-data">
                <div class="file-upload-container">
                    <input class="styled-file-input" type="file" name="csvFile" accept=".csv">
                    <button class="export-button" type="submit">Import CSV</button>
                </div>
            </form>
        </div>
    </div>

    <div id="Settings" class="tabcontent" style="display: none;">
        <form id="add-entry-form" class="styled-form">
            <div class="form-group">
                <label for="key">Key:</label>
                <input type="text" id="key" name="key" required>
            </div>
            
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" required>
            </div>
            
            <div class="form-group">
                <label for="toil">TOIL:</label>
                <input type="number" id="toil" name="toil" required>
            </div>
            
            <div class="form-group">
                <label for="holidayCurrentYear">Remaining Holiday Balance (Current Year):</label>
                <input type="number" id="holidayCurrentYear" name="holidayCurrentYear" required>
            </div>
            
            <div class="form-group">
                <label for="holidayNextYear">Remaining Holiday Balance (Next Year):</label>
                <input type="number" id="holidayNextYear" name="holidayNextYear" required>
            </div>
            
            <div class="form-group">
                <label for="wageId">Wage ID:</label>
                <input type="number" id="wageId" name="wageId" required>
            </div>
            
            <div class="form-group">
                <label for="contractHours">Contract Hours:</label>
                <input type="number" id="contractHours" name="contractHours" required>
            </div>
            
            <div class="form-group">
                <label for="managementUnit">Management Unit:</label>
                <select id="managementUnit" name="managementUnit" required>
                    <option value="" disabled selected>Select a management unit</option>
                    <!-- Options will be populated by JavaScript -->
                </select>
            </div>
            
            <div class="form-group">
                <label for="team">Team:</label>
                <select id="team" name="team" required>
                    <option value="" disabled selected>Select a team</option>
                    <!-- Options will be populated by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <button class="export-button" type="submit" class="styled-button">Add Agent</button>
            </div>
        </form>
        
        <script>
            document.addEventListener('DOMContentLoaded', async function() {
                try {
                    const managementUnitResponse = await fetch('/management-units');
                    const managementUnits = await managementUnitResponse.json();
                    const managementUnitSelect = document.getElementById('managementUnit');
        
                    managementUnits.forEach(unit => {
                        const option = document.createElement('option');
                        option.value = unit.id;
                        option.textContent = unit.name;
                        managementUnitSelect.appendChild(option);
                    });
        
                    const teamResponse = await fetch('/teams');
                    const teams = await teamResponse.json();
                    const teamSelect = document.getElementById('team');
        
                    console.log('Teams fetched:', teams); // Debug log
        
                    teams.forEach(team => {
                        const option = document.createElement('option');
                        option.value = team.id;
                        option.textContent = team.name;
                        teamSelect.appendChild(option);
                    });
        
                    console.log('Team options appended:', teamSelect.options); // Debug log
                } catch (error) {
                    console.error('Error fetching data:', error);
                    alert('Error fetching data');
                }
            });
        
            document.getElementById('add-entry-form').addEventListener('submit', (event) => {
                event.preventDefault();
                
                const formData = new FormData(event.target);
                const data = Object.fromEntries(formData.entries());
                
                // Convert IDs to string values
                const managementUnitElement = document.querySelector('#managementUnit option:checked');
                const teamElement = document.querySelector('#team option:checked');
                
                data['managementUnit'] = managementUnitElement ? managementUnitElement.textContent : '';
                data['workTeam'] = teamElement ? teamElement.textContent : '';
                
                console.log('Form Data before sending:', data); // Debug log
                
                fetch('/add-entry', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.text())
                .then(result => {
                    console.log('Server response:', result); // Debug log
                    alert(result);
                })
                .catch(error => {
                    console.error('Error adding entry:', error); // Debug log
                    alert('Error adding entry: ' + error.message);
                });
            });
        </script>
    </div>

    <div id="TimeOffBalances" class="tabcontent style="display: block;">
        <div class="filters">
            <div>
                <h3>Select Agent</h3>
                <select id="agent-select" onchange="updateTables()">
                    <option value="Select" selected>Please Select</option>
                    <option value="all">Select All</option>
                    <!-- loops through the users in the datatable by name  -->
                    <% Object.keys(userdata).forEach(function(name) { %>
                        <option value="<%= name %>"><%= name %></option>
                        <script>
                            console.log("Option created: <%= name %>");
                        </script>
                    <% }); %>
                    
                </select>
            </div>
            <div>
                <h3>Select Year</h3>
                <select id="year-select" onchange="updateTables()">
                    <option value="Select" selected>Please Select</option>
                    <option value="all">Select All</option>
                    <option value="2024">2024</option>
                    <option value="2025">2025</option>
                </select>
            </div>
            <div>
                <h3>Select Management Unit</h3>
                <select id="management-unit-select" onchange="updateTables()">
                    <option value="Select" selected>Please Select</option>
                    <option value="all">Select All</option>
                    
                    <%
                    const uniqueData = new Set();
                    Object.keys(userdata).forEach(function(name) {
                        const user = userdata[name][0]; // Access the first element in the array
                        if (!uniqueData.has(user.managementUnit)) {
                            uniqueData.add(user.managementUnit);
                    %>
                            <option value="<%= user.managementUnit %>"><%= user.managementUnit %></option>
                    <%
                        }
                    });
                    %>
                    
                </select>
            </div>
            <div>
                <h3>Select Work Team</h3>
                <select id="team-select" onchange="updateTables()">
                    <option value="Select" selected>Please Select</option>
                    <option value="all">Select All</option>
                    <%
                    const uniqueDataWT = new Set();
                    Object.keys(userdata).forEach(function(name) {
                        const user = userdata[name][0]; // Access the first element in the array
                        if (!uniqueDataWT.has(user.team)) {
                            uniqueDataWT.add(user.team);
                    %>
                            <option value="<%= user.team %>"><%= user.team %></option>
                    <%
                        }
                    });
                    %>
                </select>
            </div>
        </div>

        <div class="search-container">
            <input type="text" id="search-input" placeholder="Search by agent name" onkeyup="filterTables()">
        </div>


        <h3>Time off Balances</h3>
        <table id="balances-table">
            <thead>
                <tr>
                    <th>Agent Name</th>
                    <th>Team</th>
                    <th>Management Unit</th>
                    <th>Holiday (Current Year)</th>
                    <th>Holiday (Next Year)</th>
                    <th>Time off In Lieu</th>
                </tr>
            </thead>
            <tbody id="balances-table-body">
                <!-- Data rows go here -->
            </tbody>
        </table>
        <div class="export-buttons">
            <button class="export-button" onclick="exportTableToCSV('balances-table', 'time_off_balances.csv')">Export Time Off Balances</button>
        </div>

        <h3>Time off Details</h3>
        <table id="details-table">
            <thead>
                <tr>
                    <th>Agent Name</th>
                    <th>Team</th>
                    <th>Management Unit</th>
                    <th>Time off Start</th>
                    <th>Time off End</th>
                    <th>Balance Deduction (Hrs)</th>
                    <th>Days</th>
                </tr>
            </thead>
            <tbody id="details-table-body">
                <!-- Data rows go here -->
            </tbody>
        </table>
        <div class="export-buttons">
            <button class="export-button" onclick="exportTableToCSV('details-table', 'time_off_details.csv')">Export Time Off Details</button>
        </div>
        
    </div>
</body>
</html>


</html>


<style>
    body {
    font-family: 'Proxima Nova', Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f0f0;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #63AB8F; /* Custom Teal */
    color: white;
}

header h1 {
    margin: 0;
}

h2, h3 {
    color: #2b3a42;
    
}

.logo {
    height: 50px;
    background-color: transparent;
}

.divider {
    border: none;
    height: 1px;
    background-color: #ddd;
    margin: 0;
}

.tab-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #f0f0f0;
    border-bottom: 1px solid #ddd;
    padding: 0;
    margin: 0;
}

.tab {
    display: flex;
    overflow: hidden;
}

.tab button {
    background-color: inherit;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 17px;
    margin: 0;
}

.tab button:hover {
    background-color: #ddd;
}

.tab button.active {
    background-color: #63AB8F;
    color: white;
}

.button-container {
    display: flex;
    gap: 10px;
}

.save-button, .import-button-label {
    padding: 10px 20px;
    background-color: #63AB8F;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.import-button-label input {
    display: none;
}

.tabcontent {
    /* display: none; */
    padding: 20px;
    background-color: white;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-top: 20px;
}

.tabcontent table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.tabcontent table, th, td {
    border: 1px solid #ddd;
}

.tabcontent th {
    background-color: #63AB8F; /* Custom Teal */
    color: white;
}

.tabcontent th, .tabcontent td {
    padding: 10px;
    text-align: left;
}

.tabcontent label {
    display: block;
    margin-top: 10px;
}

.tabcontent select, .tabcontent textarea {
    width: 100%;
    padding: 10px;
    margin-top: 5px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.tabcontent textarea {
    height: 100px;
}

.filters {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
    justify-content: space-between;
}

.filters > div {
    flex: 1;
}

.checkbox-container {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.checkbox-container label {
    margin-left: 10px;
}

.export-buttons {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

.export-button {
    padding: 10px 20px;
    background-color: #63AB8F;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    width: 200px; /* Ensure both buttons have the same width */
    display: flex;
    align-items: center;
    justify-content: center;
}

.negative {
    background-color: pink;
    color: red;
}

.search-container {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 20px;
}

.search-container input {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 300px;
}

.filters div h3 {
    margin-bottom: 5px;
}

.styled-form {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
}

.styled-form .form-group {
    margin-bottom: 15px;
}

.styled-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.styled-form input {
    width: 100%;
    padding: 8px;
    box-sizing: border-box;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.styled-form .btn {
    display: inline-block;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    outline: none;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 5px;
    box-shadow: 0 4px #999;
}

.styled-form .btn:hover {
    background-color: #0056b3;
}

.styled-form .btn:active {
    background-color: #0056b3;
    box-shadow: 0 2px #666;
    transform: translateY(2px);
}
.file-upload-container {
    display: flex;
    align-items: center;
    gap: 10px; /* Adjust the gap as needed */
    padding-right: 20px;
}
</style>
